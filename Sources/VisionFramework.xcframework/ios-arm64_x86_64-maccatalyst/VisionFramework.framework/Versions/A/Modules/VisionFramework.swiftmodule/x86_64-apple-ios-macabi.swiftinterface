// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios15.4-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisionFramework
import Combine
import Foundation
import SafariServices
import Swift
import SystemConfiguration
import UIKit
@_exported import VisionFramework
import _Concurrency
public struct VisionImageInfoResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
public enum VisionError : Swift.Error {
  case general
  case error(title: Swift.String, message: Swift.String)
  case noInternetConnection
  case badURL
  case returnedDataIsEmpty
  case failedToParseData(message: Swift.String)
  case requestCanceled
  case imageError
  public var errorTitle: Swift.String {
    get
  }
  public var errorMessage: Swift.String {
    get
  }
}
public struct VisionProductSetsResponse : Swift.Codable {
  public let productSets: [VisionFramework.ProductSet]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductSet : Swift.Codable {
  public let name: Swift.String
  public let displayName: Swift.String?
  public let indexTime: Swift.String
  public let indexError: VisionFramework.IndexError?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IndexError : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public struct VisionRequestUIConfig {
  public let needsLogs: Swift.Bool
  public let googleAPIKey: Swift.String
  public let projectId: Swift.String
  public let regionId: Swift.String
  public init(needsLogs: Swift.Bool, googleAPIKey: Swift.String, projectId: Swift.String, regionId: Swift.String)
}
public class VisionRequest {
  public init(googleAPIKey: Swift.String, needsLogs: Swift.Bool)
  public func retrieveProductSets(projectId: Swift.String, regionId: Swift.String, completion: @escaping (Swift.Result<VisionFramework.VisionProductSetsResponse, VisionFramework.VisionError>) -> ())
  public func retrieveImageInfo(path: Swift.String, completion: @escaping (Swift.Result<VisionFramework.VisionImageInfoResponse, VisionFramework.VisionError>) -> ())
  public func detectProduct(source: UIKit.UIImage, config: VisionFramework.VisionRequestConfig, completion: @escaping (Swift.Result<VisionFramework.VisionImageReponse, VisionFramework.VisionError>) -> ())
  @objc deinit
}
public struct VisionImageReponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Response : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CropHintsAnnotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct CropHint : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Bounding : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Vertex : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct FullTextAnnotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Page : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Block : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Paragraph : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Word : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct WordProperty : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct DetectedLanguage : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Symbol : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct SymbolProperty : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct DetectedBreak : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Annotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct LocalizedObjectAnnotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct BoundingPoly : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct TextAnnotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductSearchResults : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductGroupedResult : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ObjectAnnotation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductResult : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct Product : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct ProductLabel : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct VisionRequestConfig {
  public enum ProductCategories : Swift.String {
    case apparel
    case homegoods
    case toys
    case apparelV2
    case homegoodsV2
    case toysV2
    case packagedgoodsV1
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DetectionType {
    case landmark
    case logo
    case label
    case text
    case cropHints
    case objectLocalization
    case product(productSetPath: Swift.String, categoryId: VisionFramework.VisionRequestConfig.ProductCategories)
  }
  public let maxResultsCount: Swift.Int
  public let detectionTypes: [VisionFramework.VisionRequestConfig.DetectionType]
  public init(maxResultsCount: Swift.Int, detectionTypes: [VisionFramework.VisionRequestConfig.DetectionType])
  public func convertToAPIDetectionInfo() -> [[Swift.String : Any]]
}
public class VisionUIRequest {
  public init(config: VisionFramework.VisionRequestUIConfig)
  public func detectProduct(source: UIKit.UIImage, sourceController: UIKit.UIViewController)
  @objc deinit
}
extension VisionFramework.VisionRequestConfig.ProductCategories : Swift.Equatable {}
extension VisionFramework.VisionRequestConfig.ProductCategories : Swift.Hashable {}
extension VisionFramework.VisionRequestConfig.ProductCategories : Swift.RawRepresentable {}
